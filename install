# /install
#!/usr/bin/env bash
LOG="${HOME}/Library/Logs/dotfiles.log"
GITHUB_USER=EduardoNeville
GITHUB_REPO=dotfiles
DIR="/usr/local/opt/${GITHUB_REPO}"

_process() {
  echo "$(date) PROCESSING:  $@" >> $LOG
  printf "$(tput setaf 6) %s...$(tput sgr0)\n" "$@"
}

_success() {
  local message=$1
  printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}

download_dotfiles() {
  _process "→ Creating directory at ${DIR} and setting permissions"
  mkdir -p "${DIR}"

  _process "→ Downloading repository to /tmp directory"
  curl -#fLo /tmp/${GITHUB_REPO}.tar.gz "https://github.com/${GITHUB_USER}/${GITHUB_REPO}/tarball/main"

  _process "→ Extracting files to ${DIR}"
  tar -zxf /tmp/${GITHUB_REPO}.tar.gz --strip-components 1 -C "${DIR}"

  _process "→ Removing tarball from /tmp directory"
  rm -rf /tmp/${GITHUB_REPO}.tar.gz

  [[ $? ]] && _success "${DIR} created, repository downloaded and extracted"

  # Change to the dotfiles directory
  cd "${DIR}"
}

# /install
link_dotfiles() {
 # symlink files to the HOME directory.
 if [[ -f "${DIR}/opt/files" ]]; then
   _process "→ Symlinking dotfiles in /configs"

   # Set variable for list of files
   files="${DIR}/opt/files"

    # Store IFS separator within a temp variable
    OIFS=$IFS
    # Set the separator to a carriage return & a new line break
    # read in passed-in file and store as an array
    IFS=$'\r\n'
    links=($(cat "${files}"))

    # Loop through array of files
    for index in ${!links[*]}
    do
      for link in ${links[$index]}
      do
        _process "→ Linking ${links[$index]}"
        # set IFS back to space to split string on
        IFS=$' '
        # create an array of line items
        file=(${links[$index]})
        # Create symbolic link
        mkdir -p "${HOME}/.config/${file[1]%/*}"
       
	ln -fs "${DIR}/${file[0]}" "${HOME}/.config/${file[1]}"
     done
     # set separater back to carriage return & new line break
     IFS=$'\r\n'
   done
   # Reset IFS back
   IFS=$OIFS
   source "${HOME}/.bash_profile"
   [[ $? ]] && _success "All files have been copied"
  fi
}
# /install
install_homebrew() {
 _process "→ Installing Homebrew"
 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

 _process "→ Running brew doctor"
 brew doctor
 [[ $? ]] \
 && _success "Installed Homebrew"
}

install_formulae() {
 if ! type -P 'brew' &> /dev/null; then
   _error "Homebrew not found"
 else
   _process "→ Installing Homebrew packages"

   # Set variable for list of homebrew formulaes
   brews="${DIR}/opt/homebrew"

    # Update and upgrade all packages
    _process "→ Updating and upgrading Homebrew packages"
    brew update
    brew upgrade

    # Tap some necessary formulae
    brew tap homebrew/cask-versions
    brew tap homebrew/cask-drivers
    brew tap vitorgalvao/tiny-scripts

    # Store IFS within a temp variable
    OIFS=$IFS

    # Set the separator to a carriage return & a new line break
    # read in passed-in file and store as an array
    IFS=$'\r\n' formulae=($(cat "${brews}"))

    # Loop through split list of formulae
    _process "→ Checking status of desired Homebrew formulae"
    for index in ${!formulae[*]}
    do
      # Test whether a Homebrew formula is already installed
      if ! brew list ${formulae[$index]} &> /dev/null; then
        brew install ${formulae[$index]}
      fi
    done

    # Reset IFS back
    IFS=$OIFS

    brew cleanup

    [[ $? ]] && _success "All Homebrew packages installed and updated"
  fi
}

install_oh_my_zsh(){
	_process "→ Installing Oh-My-Zsh"
 	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
	 [[ $? ]] \
	 && _success "Installed Oh-My-Zsh"

	# autosuggestions plugin
	_process "Installing autosuggestion plugin"
	git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

	# syntax highlighting
	_process "Installing autosuggestion plugin"
	git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 

}

install_node() {
 if ! type -P 'npm' &> /dev/null; then
   _process "→ Installing node"

   curl https://www.npmjs.org/install.sh | sh

   [[ $? ]] \
   && _success "Installed npm"
  fi
}

install_rust(){
	_process "zsh post installing highlighting plugin"
	c/bin/bash -c "$(-curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh)"
}

install() {
  download_dotfiles
  link_dotfiles
  install_homebrew
  install_formulae
  install_oh_my_zsh
  install_node
  install_rust
}

install
